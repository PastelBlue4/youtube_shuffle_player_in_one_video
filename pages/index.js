import Head from "next/head";
import { useRef, useState } from "react";
import TimeLineButton from "../components/TimeLineButton";
import VideoContainer from "../components/VideoContainer";

export default function Home() {
  const autoPlay = "?autoplay=1";
  const continuousPlay = "&autoplay=1";
  const [getLink, setGetLink] = useState("");
  const inputLinkValue = useRef();
  const [finalLink, setFinalLink] = useState("");
  const [shufflePlay, setShufflePlay] = useState([]);

  const submitLink = (e) => {
    e.preventDefault();
    setGetLink(inputLinkValue.current.value);
    setFinalLink(getLink + autoPlay);
    inputLinkValue.current.value = "";
  };

  function playTime(ms) {
    return new Promise((res) => setTimeout(res, ms));
  }

  const testArray = ["0", "213", "448", "676", "933", "1166", "1340"];

  async function startPlay() {
    for (const currentValue of testArray) {
      setFinalLink(getLink + `?start=${currentValue}` + continuousPlay);
      console.log(currentValue);
      await playTime(10000);
    }
  }

  //여기서 배열의 순서를 받아와서 실행한다.
  //구간을 받아와야하네 >> 없으 수도 있음
  // 그렇다면 쭉 진행 되는 노래 타임라인을 받아와서 index[1] - index[0] 를 빼면

  // setTimeout(() => {
  //   setFinalLink(getLink + `?start=${currentValue}` + continuousPlay);
  // }, Number(3) * 1000);

  return (
    <>
      <div>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
        </Head>
      </div>

      <form>
        <div className="flex justify-center w-full">
          <input
            placeholder="  write your youtube link"
            ref={inputLinkValue}
            className="w-2/4 border border-sindigo-600 "
          />
          <button
            onClick={submitLink}
            className="px-10 py-5 text-white bg-indigo-500 rounded-xl"
          >
            submit
          </button>
        </div>
      </form>
      <div className="w-full h-auto border border-red-500">
        <div className="flex justify-center w-full">
          <div>
            <VideoContainer finalLink={finalLink} />

            {testArray.map((timeline, index) => (
              <TimeLineButton
                onClick={() =>
                  setFinalLink(getLink + `?start=${timeline}` + continuousPlay)
                }
                key={index}
                timeLine={timeline}
              />
            ))}
            <button onClick={startPlay}>Play Start!</button>
          </div>
        </div>
      </div>
    </>
  );
}

// ("https://www.youtube.com/embed/g0lQESej9zc");
// ("https://www.youtube.com/embed/g0lQESej9zc");
// ("https://www.youtube.com/embed/Irmkb1psaJ0?start=10");
// ("https://www.youtube.com/embed/Irmkb1psaJ0&ab_channel=%EC%98%A4%EB%B6%84%EC%88%9C%EC%82%AD");
// ("https://www.youtube.com/embed/Irmkb1psaJ0&ab_channel=%EC%98%A4%EB%B6%84%EC%88%9C%EC%82%AD");
// "https://www.youtube.com/watch?v=g0lQESej9zc&ab_channel=KenardLau "(
//   "https://www.youtube.com/embed/g0lQESej9zc "
// )("https://www.youtube.com/embed/g0lQESej9zc");
// 유튜브 영상 아이디는 항상 11

// https://www.youtube.com/embed/Irmkb1psaJ0

// https://youtube.com/embed/g0lQESej9zc
